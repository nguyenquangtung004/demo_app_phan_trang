import 'package:dio/dio.dart';
import '../../core/error/error.dart';
import '../models/nation_model.dart';

class NationRemoteDataSource {
  final Dio _dio = Dio(
    BaseOptions(
      baseUrl: 'https://restcountries.com/v3.1',
      connectTimeout: Duration(seconds: 120),
      receiveTimeout: Duration(seconds: 120),
    ),
  );

  NationRemoteDataSource() {
    _dio.interceptors.add(InterceptorsWrapper(
      onError: (DioException error, handler) async {
        if (error.type == DioExceptionType.connectionTimeout) {
          print('üï∞Ô∏è Timeout x·∫£y ra, th·ª≠ l·∫°i sau 5 gi√¢y...');
          await Future.delayed(Duration(seconds: 5));
          return handler.next(error);
        }
        return handler.reject(error);
      },
    ));
  }

  /// Fetch c√°c qu·ªëc gia c√≥ ch·ªØ "B" v√† h·ªó tr·ª£ ph√¢n trang (offset + limit)
  Future<List<NationModel>> fetchNations({int offset = 0, int limit = 10}) async {
    try {
      print('üîó [DataSource] ƒêang g·ªçi API ƒë·ªÉ l·ªçc qu·ªëc gia c√≥ ch·ªØ "B" v·ªõi offset: $offset v√† limit: $limit...');
      
      // G·ªçi API ch·ªâ l·∫•y t√™n v√† c·ªù
      final response = await _dio.get('/all?fields=name,flags');
      // final response = await _dio.get('/region/europe?fields=name,flags');

      if (response.statusCode == 200) {
        final List<dynamic> data = response.data;

        // ‚úÖ L·ªçc c√°c qu·ªëc gia c√≥ ch·ª©a ch·ªØ "B"
        final filteredData = data.where((nation) {
          final name = nation['name']['common'].toString().toLowerCase();
          return name.contains('b');
        }).toList();

        // ‚úÖ Ph√¢n trang d·ª±a tr√™n offset v√† limit
        if (offset >= filteredData.length) {
          print('‚ö†Ô∏è [DataSource] Offset v∆∞·ª£t qu√° t·ªïng s·ªë qu·ªëc gia');
          return [];
        }

        final paginatedData = filteredData.skip(offset).take(limit).toList();
        print('‚úÖ [DataSource] D·ªØ li·ªáu l·ªçc & ph√¢n trang: ${paginatedData.length} qu·ªëc gia.');

        // ‚úÖ Chuy·ªÉn ƒë·ªïi t·ª´ JSON sang NationModel
        return paginatedData.map((nation) => NationModel.fromJson(nation)).toList();
      } else {
        throw Exception('‚ùå [DataSource] HTTP Error: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå [DataSource] L·ªói khi fetch d·ªØ li·ªáu t·ª´ server: $e');
      throw Exception('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ server: $e');
    }
  }

  /// X·ª≠ l√Ω l·ªói HTTP
  Exception _handleHttpError(int? statusCode) {
    switch (statusCode) {
      case 400:
        return BadRequestException('Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá');
      case 404:
        return NotFoundException('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu');
      case 500:
        return ServerErrorException('L·ªói m√°y ch·ªß');
      default:
        return UnknownException('L·ªói kh√¥ng x√°c ƒë·ªãnh: $statusCode');
    }
  }

  /// X·ª≠ l√Ω l·ªói DioException
  Exception _mapDioError(DioException error) {
    switch (error.type) {
      case DioExceptionType.connectionTimeout:
        return NetworkException('K·∫øt n·ªëi ƒë·∫øn server qu√° l√¢u');
      case DioExceptionType.receiveTimeout:
        return NetworkException('Server ph·∫£n h·ªìi qu√° l√¢u');
      default:
        return UnknownException('L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.message}');
    }
  }
}
