// lib/domain/usecases/get_nation.dart

/// SECTION: Import c√°c th∆∞ vi·ªán v√† ƒë·ªãnh nghƒ©a use case
import 'package:demo_app/domain/entities/nation.dart';
import '../repository/nation_repository.dart';

/// SECTION: Use Case GetNations
/// NOTE: Nhi·ªám v·ª• ch√≠nh l√† g·ªçi repository ƒë·ªÉ l·∫•y danh s√°ch qu·ªëc gia

class GetNations {
  // ANCHOR: Khai b√°o repository v√† thu·ªôc t√≠nh ph√¢n trang
  final NationRepository repository;

  /// ‚úÖ T√°ch bi·ªát logic ph√¢n trang (Clean h∆°n)
  int _offset = 0;
  final int _limit = 5;
  bool _hasMore = true;

  /// SECTION: Constructor - Inject repository t·ª´ b√™n ngo√†i (Dependency Injection)
  GetNations({required this.repository});

  /// SECTION: Ph∆∞∆°ng th·ª©c call ƒë·ªÉ g·ªçi use case v·ªõi ph√¢n trang
  Future<List<NationEntity>> call() async {
    if (!_hasMore) {
      print('‚ö†Ô∏è [GetNations] Kh√¥ng c√≤n d·ªØ li·ªáu ƒë·ªÉ t·∫£i.');
      return [];
    }

    print('üîÑ [GetNations] G·ªçi use case v·ªõi offset: $_offset, limit: $_limit');
    try {
      // ANCHOR: G·ªçi repository ƒë·ªÉ l·∫•y d·ªØ li·ªáu
      final nations = await repository.getNations(offset: _offset, limit: _limit);
      print('‚úÖ [GetNations] D·ªØ li·ªáu l·∫•y th√†nh c√¥ng. S·ªë l∆∞·ª£ng: ${nations.length}');

      // ANCHOR: C·∫≠p nh·∫≠t offset v√† ki·ªÉm tra c√≤n d·ªØ li·ªáu kh√¥ng
      _offset += nations.length;
      _hasMore = nations.length == _limit;

      return nations;
    } catch (e) {
      // ERROR: X·ª≠ l√Ω l·ªói chi ti·∫øt
      print('‚ùå [GetNations] L·ªói khi g·ªçi repository: $e');
      throw Exception('L·ªói khi g·ªçi repository: $e');
    }
  }

  /// SECTION: Reset ph√¢n trang khi l√†m m·ªõi d·ªØ li·ªáu
  void resetPagination() {
    _offset = 0;
    _hasMore = true;
    print('üîÑ [GetNations] Reset ph√¢n trang v·ªÅ gi√° tr·ªã ban ƒë·∫ßu.');
  }

  /// ‚úÖ Getter ki·ªÉm tra c√≤n d·ªØ li·ªáu hay kh√¥ng
  bool get hasMoreData => _hasMore;
}
